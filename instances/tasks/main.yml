---
# tasks file for instances
- name: Create simple security group
  ec2_group:
    name: webservers
    description: A security group for my current IP
    region: us-east-1
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: "0.0.0.0/0"
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "0.0.0.0/0"
    rules_egress:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
  register: webservers_group

- name: Create the ELB only listening over port 80
  ec2_elb_lb:
    name: "{{ application }}-load-balancer"
    state: present
    region: us-east-1
    zones:
      - us-east-1a
      - us-east-1b
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
  register: elb

- name: Create EC2 instances
  ec2:
    key_name: awsdevopskey
    instance_type: t2.micro
    image: ami-0d5eff06f840b45e9
    region: us-east-1
    group_id:
      - "{{ webservers_group.group_id }}"
      - "{{ elb.elb.security_group_ids | first }}"
    wait: yes
    exact_count: "{{ instance_count }}"
    count_tag:
      application: "{{ application }}"
    instance_tags:
      application: "{{ application }}"
  register: ec2_instances

- name: Store EC2 instance IPs to provision against
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: ec2_instance_ips
  with_items: "{{ ec2_instances.tagged_instances }}"

- name: Wait for servers to come online
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    state: started
  with_items: "{{ ec2_instances.tagged_instances }}"

- name: Add EC2 instances as known hosts
  known_hosts:
    name: "{{ item.public_ip }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
  with_items: "{{ ec2_instances.tagged_instances }}"
